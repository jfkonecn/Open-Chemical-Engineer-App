<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Area" xml:space="preserve">
    <value>Area</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="CircularPipe" xml:space="preserve">
    <value>Circular Pipe</value>
  </data>
  <data name="Density" xml:space="preserve">
    <value>Density</value>
  </data>
  <data name="Diameter" xml:space="preserve">
    <value>Diameter</value>
  </data>
  <data name="DischargeCoefficient" xml:space="preserve">
    <value>Discharge Coefficient</value>
  </data>
  <data name="ErrorMessageTitle" xml:space="preserve">
    <value>ERROR!</value>
    <comment>Title of an error popup message</comment>
  </data>
  <data name="Fluids" xml:space="preserve">
    <value>Fluids</value>
  </data>
  <data name="InletPipeArea" xml:space="preserve">
    <value>Inlet Pipe Area</value>
  </data>
  <data name="NotANumber" xml:space="preserve">
    <value>Value must be a number!</value>
  </data>
  <data name="Okay" xml:space="preserve">
    <value>Okay</value>
  </data>
  <data name="OrificeArea" xml:space="preserve">
    <value>Orifice Area</value>
  </data>
  <data name="OrificePlate" xml:space="preserve">
    <value>Orifice Plate</value>
  </data>
  <data name="OutputCouldBeCalculated" xml:space="preserve">
    <value>Output could not be calculated!</value>
  </data>
  <data name="ParameterValidRange" xml:space="preserve">
    <value>Please enter a number between {0} and {1}</value>
    <comment>Lets user know the valid range for a Calculations.Parameter object</comment>
  </data>
  <data name="PDAcrossOP" xml:space="preserve">
    <value>Drop in Pressure (pIn - pOut) Across Orifice Plate</value>
  </data>
  <data name="Per" xml:space="preserve">
    <value>Per</value>
    <comment>As in meters per second</comment>
  </data>
  <data name="SolveFor" xml:space="preserve">
    <value>Solve For</value>
  </data>
  <data name="SubFunction" xml:space="preserve">
    <value>Calculate Value Using Substitute Function</value>
  </data>
  <data name="Thermo" xml:space="preserve">
    <value>Thermo</value>
    <comment>abbreviation for thermodynamics</comment>
  </data>
  <data name="UnexpectedException" xml:space="preserve">
    <value>Unexpected exception of type {0} caught: {1}</value>
    <comment>Where {0} is the type and {1} is the message</comment>
  </data>
  <data name="Unitless" xml:space="preserve">
    <value>Unitless</value>
  </data>
  <data name="Units" xml:space="preserve">
    <value>Units</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ValueAboveUpperLimit" xml:space="preserve">
    <value>Value must be less than or equal to {0}!</value>
  </data>
  <data name="ValueBelowLowerLimit" xml:space="preserve">
    <value>Value must be greater than or equal to {0}!</value>
  </data>
  <data name="VolumetricFlowRate" xml:space="preserve">
    <value>Volumetric Flow Rate</value>
  </data>
  <data name="AppTitle" xml:space="preserve">
    <value>Open ChE</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="BernoullisEquation" xml:space="preserve">
    <value>Bernoulli's Equation</value>
  </data>
  <data name="DeltaP" xml:space="preserve">
    <value>Delta P</value>
    <comment>Inlet Pressure Minus Outlet Pressure</comment>
  </data>
  <data name="Inlet" xml:space="preserve">
    <value>Inlet</value>
    <comment>As in inlet Pressure</comment>
  </data>
  <data name="InletHeight" xml:space="preserve">
    <value>Inlet Height</value>
  </data>
  <data name="InletMinusOutlet" xml:space="preserve">
    <value>Inlet - Outlet</value>
  </data>
  <data name="InletP" xml:space="preserve">
    <value>Inlet Pressure</value>
  </data>
  <data name="InletSquaredMinusOutletSquared" xml:space="preserve">
    <value>Inlet\xB2 - Outlet\xB2</value>
  </data>
  <data name="InletVelo" xml:space="preserve">
    <value>Inlet Velocity</value>
  </data>
  <data name="Outlet" xml:space="preserve">
    <value>Outlet</value>
    <comment>As in outlet Pressure</comment>
  </data>
  <data name="OutletHeight" xml:space="preserve">
    <value>Outlet Height</value>
  </data>
  <data name="OutletP" xml:space="preserve">
    <value>Outlet Pressure</value>
  </data>
  <data name="OutletVelo" xml:space="preserve">
    <value>Outlet Velocity</value>
  </data>
  <data name="CorrectionCo" xml:space="preserve">
    <value>Correction Coefficient</value>
  </data>
  <data name="FluidDensity" xml:space="preserve">
    <value>Fluid Density</value>
  </data>
  <data name="FluidVelocity" xml:space="preserve">
    <value>Fluid Velocity</value>
  </data>
  <data name="ManoDeltaH" xml:space="preserve">
    <value>Manometer Height Differential</value>
  </data>
  <data name="ManoDensity" xml:space="preserve">
    <value>Manometer Density</value>
  </data>
  <data name="PitotTube" xml:space="preserve">
    <value>PitotTube</value>
  </data>
  <data name="DirectInput" xml:space="preserve">
    <value>Direct Input</value>
  </data>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Pressure" xml:space="preserve">
    <value>Pressure</value>
  </data>
  <data name="UnitConverter" xml:space="preserve">
    <value>Unit Converter</value>
  </data>
  <data name="Energy" xml:space="preserve">
    <value>Energy</value>
  </data>
  <data name="Enthalpy" xml:space="preserve">
    <value>Enthalpy</value>
  </data>
  <data name="Entropy" xml:space="preserve">
    <value>Entropy</value>
  </data>
  <data name="Mass" xml:space="preserve">
    <value>Mass</value>
  </data>
  <data name="MassFlowRate" xml:space="preserve">
    <value>Mass Flow Rate</value>
  </data>
  <data name="SatLiquidGivenPressure" xml:space="preserve">
    <value>Saturated Liquid Given Pressure</value>
  </data>
  <data name="SatTemperature" xml:space="preserve">
    <value>Saturated Temperature</value>
  </data>
  <data name="SatVaporGivenPressure" xml:space="preserve">
    <value>Saturated Vapor Given Pressure</value>
  </data>
  <data name="SpecificVolume" xml:space="preserve">
    <value>Specific Volume</value>
  </data>
  <data name="SteamTable" xml:space="preserve">
    <value>Steam Table</value>
  </data>
  <data name="SuperHeatedVaporGivenTempPressure" xml:space="preserve">
    <value>Super-Heated Vapor Given Temperature and Pressure</value>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>Temperature</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="BoilerEfficiency" xml:space="preserve">
    <value>Boiler Efficiency</value>
  </data>
  <data name="CondenserH" xml:space="preserve">
    <value>Condenser Enthalpy</value>
  </data>
  <data name="CondenserPressure" xml:space="preserve">
    <value>Condenser Pressure</value>
  </data>
  <data name="CondenserSQ" xml:space="preserve">
    <value>Condenser Steam Quality Fraction</value>
  </data>
  <data name="IdealTurbineWork" xml:space="preserve">
    <value>Ideal Turbine Work</value>
  </data>
  <data name="RankineCycle" xml:space="preserve">
    <value>Rankine Cycle</value>
  </data>
  <data name="RealTurbineWork" xml:space="preserve">
    <value>Real Turbine Work</value>
  </data>
  <data name="SteamPressure" xml:space="preserve">
    <value>Steam Pressure</value>
  </data>
  <data name="SteamTemp" xml:space="preserve">
    <value>Steam Temperature</value>
  </data>
  <data name="ThermalEfficiency" xml:space="preserve">
    <value>Thermal Efficiency</value>
  </data>
  <data name="TurbineEfficiency" xml:space="preserve">
    <value>Turbine Efficiency</value>
  </data>
</root>